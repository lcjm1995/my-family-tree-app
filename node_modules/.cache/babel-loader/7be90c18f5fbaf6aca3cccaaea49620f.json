{"ast":null,"code":"var _jsxFileName = \"/home/lauren/Personal/DDC Mentoring/practice_project/family-tree-app/src/components/pages/loginForm.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Form, FormGroup, Label, Input } from \"reactstrap\";\nimport { db } from \"../../services/firebase\";\nimport \"../compStyle.css\";\nexport default function LoginForm(props) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const [helperText, setHelperText] = useState(\"\");\n  const [alertMessage, setAlertMessage] = useState(\"\");\n  const [users, setUsers] = useState([]); //The data we want to use to login is stored locally\n\n  useEffect(() => {\n    const user = db.collection(\"users\").get().then(snapshot => {\n      const returnedUsers = [];\n      snapshot.forEach(snap => {\n        //@ts-ignore\n        returnedUsers.push(snap.data());\n      });\n      console.log(returnedUsers);\n      setUsers(returnedUsers);\n    });\n  }); //The useHistory hook gives you access to the history instance that you may use\n  //to navigate. This will be stored as an array []\n\n  const history = useHistory(); // By using this Hook, we tell React that that component needs to do something after render.\n  // In this case it removes the whitespace surrounding the email string.\n\n  useEffect(() => {\n    if (email.trim()) {\n      setIsButtonDisabled(false);\n    } else {\n      setIsButtonDisabled(true);\n    }\n  }, [email]); //Get info is a function that will iterate over the users in the array\n  //one-by-one, if the user email and password match, this will be stored\n  //in the correctUser object, which will trigger the first if and redirect\n  //the user to the family tree page.\n\n  const getInfo = () => {\n    let correctUser = {};\n\n    for (let i = 0; i < users.length; i++) {\n      if (email === users[i].email && password === users[i].password) {\n        correctUser = users[i];\n        break;\n      }\n    }\n\n    if (Object.keys(correctUser).length) {\n      props.correctLogin();\n      setHelperText(\"Login Successful\");\n      props.setUserDetails(correctUser);\n      history.push(\"/myFamilyTree\");\n    } else {\n      setHelperText(\"Incorrect username or password\");\n      setAlertMessage(\"your credentials are incorrect, please try again\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, \" Log in page\"), /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \" \", alertMessage, \" \"), /*#__PURE__*/React.createElement(Form, {\n    className: \"login-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, \"Log in here\"), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(Input, {\n    id: \"email\",\n    label: \"email\",\n    helperText: helperText,\n    type: \"email\",\n    placeholder: \"Email\",\n    value: email // onChange allows the event to populate the setEmail use state with the value\n    //the user has inputted\n    ,\n    onChange: event => setEmail(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n    id: \"password\",\n    label: \"password\",\n    helperText: helperText,\n    type: \"password\",\n    placeholder: \"Password\",\n    value: password,\n    onChange: event => setPassword(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => getInfo(),\n    className: \"btn-lg btn-dark btn-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, \"Log in\")));\n}","map":{"version":3,"sources":["/home/lauren/Personal/DDC Mentoring/practice_project/family-tree-app/src/components/pages/loginForm.tsx"],"names":["React","useState","useEffect","useHistory","Button","Form","FormGroup","Label","Input","db","LoginForm","props","email","setEmail","password","setPassword","isButtonDisabled","setIsButtonDisabled","helperText","setHelperText","alertMessage","setAlertMessage","users","setUsers","user","collection","get","then","snapshot","returnedUsers","forEach","snap","push","data","console","log","history","trim","getInfo","correctUser","i","length","Object","keys","correctLogin","setUserDetails","event","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, useHistory } from \"react-router-dom\";\nimport { Button, Form, FormGroup, Label, Input } from \"reactstrap\";\nimport { db } from \"../../services/firebase\";\nimport \"../compStyle.css\";\nimport { UserDetails } from \"../../types\";\n\nexport default function LoginForm(props: any) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const [helperText, setHelperText] = useState(\"\");\n  const [alertMessage, setAlertMessage] = useState(\"\");\n  const [users, setUsers] = useState<UserDetails[]>([]);\n  //The data we want to use to login is stored locally\n\n  useEffect(() => {\n    const user = db\n      .collection(\"users\")\n      .get()\n      .then((snapshot) => {\n        const returnedUsers: UserDetails[] = [];\n\n        snapshot.forEach((snap) => {\n          //@ts-ignore\n\n          returnedUsers.push(snap.data());\n        });\n        console.log(returnedUsers);\n        setUsers(returnedUsers);\n      });\n  });\n\n  //The useHistory hook gives you access to the history instance that you may use\n  //to navigate. This will be stored as an array []\n\n  const history = useHistory();\n\n  // By using this Hook, we tell React that that component needs to do something after render.\n  // In this case it removes the whitespace surrounding the email string.\n\n  useEffect(() => {\n    if (email.trim()) {\n      setIsButtonDisabled(false);\n    } else {\n      setIsButtonDisabled(true);\n    }\n  }, [email]);\n\n  //Get info is a function that will iterate over the users in the array\n  //one-by-one, if the user email and password match, this will be stored\n  //in the correctUser object, which will trigger the first if and redirect\n  //the user to the family tree page.\n\n  const getInfo = () => {\n    let correctUser = {};\n    for (let i = 0; i < users.length; i++) {\n      if (email === users[i].email && password === users[i].password) {\n        correctUser = users[i];\n        break;\n      }\n    }\n\n    if (Object.keys(correctUser).length) {\n      props.correctLogin();\n      setHelperText(\"Login Successful\");\n      props.setUserDetails(correctUser);\n      history.push(\"/myFamilyTree\");\n    } else {\n      setHelperText(\"Incorrect username or password\");\n      setAlertMessage(\"your credentials are incorrect, please try again\");\n    }\n  };\n\n  return (\n    <div>\n      <h2> Log in page</h2>\n      {/* alert message is populated based upon the results of the if else statement */}\n      <h2 className=\"alert\"> {alertMessage} </h2>\n      <Form className=\"login-form\">\n        <h2 className=\"text-center\">Log in here</h2>\n        <FormGroup>\n          <Label htmlFor=\"email\">Email</Label>\n          <Input\n            id=\"email\"\n            label=\"email\"\n            helperText={helperText}\n            type=\"email\"\n            placeholder=\"Email\"\n            value={email}\n            // onChange allows the event to populate the setEmail use state with the value\n            //the user has inputted\n            onChange={(event) => setEmail(event.target.value)}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label htmlFor=\"password\">Password</Label>\n          <Input\n            id=\"password\"\n            label=\"password\"\n            helperText={helperText}\n            type=\"password\"\n            placeholder=\"Password\"\n            value={password}\n            onChange={(event) => setPassword(event.target.value)}\n          />\n        </FormGroup>\n        <Button onClick={() => getInfo()} className=\"btn-lg btn-dark btn-block\">\n          Log in\n        </Button>\n      </Form>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}